apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.2'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

// Our merge report task
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ])
}

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.a494studios.koreanconjugator"
        minSdkVersion 19
        targetSdkVersion 30
        multiDexEnabled true
        versionCode 28
        versionName "2.1.1"
        testInstrumentationRunner "com.a494studios.koreanconjugator.HanjiTestRunner"

        // Comment out for coverage to work
        // Source: https://medium.com/@mortenslotthansen/really-helpful-article-which-has-helped-me-a-lot-87afcc836992
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    buildTypes.each {
        it.buildConfigField("String", "SERVER_URL", getApiKey("serverURL"))
        it.buildConfigField("String", "SLACK_KEY", getApiKey("slackKey"))
        it.buildConfigField("String", "ADMOB_KEY", getApiKey("adMobKey"))
        it.resValue("string", "DISPLAY_AD_ID", getApiKey("displayAdID"))
        it.resValue("string", "MAIN_AD_ID", getApiKey("mainAdID"))
        it.resValue("string", "SEARCH_AD_ID", getApiKey("searchAdID"))
        it.resValue("string", "SEARCH_RESULTS_AD_ID", getApiKey("searchResultsAdID"))
        it.resValue("string", "CONJ_INFO_AD_ID", getApiKey("conjInfoAdID"))
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    sourceSets {
        androidTest {
            java.srcDirs += "src/sharedTest/java"
        }
        test {
            java.srcDirs += "src/sharedTest/java"
        }
    }
}

// return a MY API KEY from a properties file.
def getApiKey(String property) {
    File file = new File("keys.txt")
    if(file.exists()) {
        Properties properties = new Properties()
        properties.load(file.newInputStream())
        return "\"" + properties.getProperty(property) + "\""
    } else {
        project.logger.log(LogLevel.ERROR, "No keys.txt file found")
        return "\"NULL\""
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'org.jetbrains:annotations:21.0.1'
    implementation 'com.github.frankiesardo:linearlistview:1.0.1@aar'
    implementation 'com.codemybrainsout.onboarding:onboarder:1.0.4'
    implementation 'com.github.MFlisar:changelog:1.1.7'

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:28.2.1')
    implementation 'com.google.android.gms:play-services-ads:20.2.0'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'

    // Favorites parsing
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.google.guava:guava:30.1.1-android'

    // Settings, About, Feedback
    implementation 'com.codemybrainsout.rating:ratingdialog:1.0.8'
    implementation 'com.github.eggheadgames:android-about-box:2.0.1'
    implementation 'com.mikepenz:aboutlibraries:8.3.1'
    implementation 'org.rm3l:maoni:9.1.0@aar'
    implementation 'org.rm3l:maoni-email:9.1.0@aar'
    api 'org.rm3l:maoni-common:9.1.0@aar'
    implementation 'com.github.pschroen:slack-api-android:c66cc8d997'

    // Apollo
    implementation 'com.apollographql.apollo:apollo-runtime:2.5.9'
    implementation 'com.apollographql.apollo:apollo-http-cache:2.5.9'
    implementation 'com.apollographql.apollo:apollo-rx2-support:2.5.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // Google Play Billing
    implementation 'com.android.billingclient:billing:4.0.0'

    // Testing dependencies
    implementation 'androidx.test.espresso:espresso-contrib:3.4.0' // Needed for idler
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation 'org.robolectric:robolectric:4.2.1' // Can't be upgraded until #5454 is fixed
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'androidx.test:rules:1.4.0'
    testImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'org.robolectric:shadows-httpclient:4.6.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
    androidTestUtil 'androidx.test:orchestrator:1.4.0'
}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.apollographql.apollo'
apply plugin: 'com.google.firebase.crashlytics'
