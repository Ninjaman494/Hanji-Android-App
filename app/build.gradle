apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.2'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

// Our merge report task
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ])
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.a494studios.koreanconjugator"
        minSdkVersion 19
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 13
        versionName "1.4.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }

    buildTypes.each {
        it.buildConfigField("String", "SERVER_URL", getApiKey("serverURL"))
        it.buildConfigField("String", "ADMOB_KEY", getApiKey("adMobKey"))
        it.buildConfigField("String", "SLACK_KEY", getApiKey("slackKey"))
        it.resValue("string", "DISPLAY_AD_ID", getApiKey("displayAdID"))
        it.resValue("string", "MAIN_AD_ID", getApiKey("mainAdID"))
        it.resValue("string", "SEARCH_AD_ID", getApiKey("searchAdID"))
        it.resValue("string", "SEARCH_RESULTS_AD_ID", getApiKey("searchResultsAdID"))
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }
}

//return a MY API KEY from a properties file.
def getApiKey(String property) {
    Properties properties = new Properties()
    properties.load(new FileInputStream("keys.txt"))
    return "\"" + properties.getProperty(property) + "\""
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.robolectric:robolectric:4.2'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestUtil 'androidx.test:orchestrator:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.google.firebase:firebase-core:17.0.0'
    implementation 'com.google.firebase:firebase-ads:18.0.0'
    implementation 'com.google.firebase:firebase-messaging:19.0.1'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.0@aar') { transitive = true }
    implementation 'com.github.frankiesardo:linearlistview:1.0.1@aar'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.google.guava:guava:23.0-android'
    implementation 'com.andkulikov:transitionseverywhere:1.7.8'
    implementation 'com.codemybrainsout.rating:ratingdialog:1.0.8'
    implementation project(':about-box')
    implementation('com.mikepenz:aboutlibraries:6.1.1@aar') { transitive = true }
    implementation 'org.rm3l:maoni:6.0.0'
    implementation 'org.rm3l:maoni-common:6.0.0'
    implementation 'com.github.pschroen:slack-api-android:c66cc8d997'
    implementation 'com.github.daniel-stoneuk:material-about-library:2.3.0'
    implementation 'com.apollographql.apollo:apollo-runtime:1.0.1'
    implementation 'com.apollographql.apollo:apollo-http-cache:1.0.1'
    implementation 'org.jetbrains:annotations:16.0.2'
}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.apollographql.android'
